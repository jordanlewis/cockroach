// Code generated by execgen; DO NOT EDIT.
// Copyright 2019 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"context"
	"fmt"
	"math"

	"github.com/cockroachdb/apd/v2"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coldataext"
	"github.com/cockroachdb/cockroach/pkg/col/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

func GetCastOperator(
	allocator *colmem.Allocator,
	input colexecbase.Operator,
	colIdx int,
	resultIdx int,
	fromType *types.T,
	toType *types.T,
) (colexecbase.Operator, error) {
	input = newVectorTypeEnforcer(allocator, input, toType, resultIdx)
	if fromType.Family() == types.UnknownFamily {
		return &castOpNullAny{
			castOpBase: castOpBase{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
			},
		}, nil
	}
	leftType, rightType := fromType, toType
	switch typeconv.TypeFamilyToCanonicalTypeFamily(leftType.Family()) {
	case types.BoolFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castBoolBoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castBoolFloat64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castBoolInt16Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case 32:
					return &castBoolInt32Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case -1:
				default:
					return &castBoolInt64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		}
	case types.DecimalFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDecimalDecimalOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDecimalBoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		}
	case types.IntFamily:
		switch leftType.Width() {
		case 16:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castInt16Int16Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case 32:
					return &castInt16Int32Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case -1:
				default:
					return &castInt16Int64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt16BoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt16DecimalOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt16Float64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		case 32:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castInt32Int16Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case 32:
					return &castInt32Int32Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case -1:
				default:
					return &castInt32Int64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt32BoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt32DecimalOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt32Float64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castInt64Int16Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case 32:
					return &castInt64Int32Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case -1:
				default:
					return &castInt64Int64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt64BoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt64DecimalOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt64Float64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		}
	case types.FloatFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castFloat64Float64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castFloat64BoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castFloat64DecimalOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castFloat64Int16Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case 32:
					return &castFloat64Int32Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				case -1:
				default:
					return &castFloat64Int64Op{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		}
	case typeconv.DatumVecCanonicalTypeFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDatumBoolOp{
						castOpBase: castOpBase{
							OneInputNode: NewOneInputNode(input),
							allocator:    allocator,
							colIdx:       colIdx,
							outputIdx:    resultIdx,
						},
					}, nil
				}
			}
		}
	}
	return nil, errors.Errorf("unhandled cast %s -> %s", fromType, toType)
}

type castOpBase struct {
	OneInputNode
	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
}

func (c *castOpBase) Init() {
	c.input.Init()
}

type castOpNullAny struct {
	castOpBase
}

var _ colexecbase.Operator = &castOpNullAny{}

func (c *castOpNullAny) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(c.colIdx)
	projVec := batch.ColVec(c.outputIdx)
	vecNulls := vec.Nulls()
	projNulls := projVec.Nulls()
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over nulls values in the
		// output vector.
		projNulls.UnsetNulls()
	}
	if sel := batch.Selection(); sel != nil {
		sel = sel[:n]
		for _, i := range sel {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				colexecerror.InternalError(errors.Errorf("unexpected non-null at index %d", i))
			}
		}
	} else {
		for i := 0; i < n; i++ {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				colexecerror.InternalError(fmt.Errorf("unexpected non-null at index %d", i))
			}
		}
	}
	return batch
}

type castBoolBoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castBoolBoolOp{}

func (c *castBoolBoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool
							r = v
							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r bool
						r = v
						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r bool
						r = v
						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolFloat64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castBoolFloat64Op{}

func (c *castBoolFloat64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolInt16Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castBoolInt16Op{}

func (c *castBoolInt16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolInt32Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castBoolInt32Op{}

func (c *castBoolInt32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolInt64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castBoolInt64Op{}

func (c *castBoolInt64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							r = 0
							if v {
								r = 1
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						r = 0
						if v {
							r = 1
						}

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castDecimalDecimalOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castDecimalDecimalOp{}

func (c *castDecimalDecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Decimal()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal
							r = v
							outputCol[i].Set(&r)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal
							r = v
							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal
						r = v
						outputCol[i].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal
						r = v
						outputCol[i].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castDecimalBoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castDecimalBoolOp{}

func (c *castDecimalBoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Decimal()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool
							r = v.Sign() != 0
							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool
							r = v.Sign() != 0
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r bool
						r = v.Sign() != 0
						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r bool
						r = v.Sign() != 0
						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16Int16Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt16Int16Op{}

func (c *castInt16Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16
							r = v
							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int16
						r = v
						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int16
						r = v
						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16Int32Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt16Int32Op{}

func (c *castInt16Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							r = int32(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							r = int32(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						r = int32(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						r = int32(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16Int64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt16Int64Op{}

func (c *castInt16Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16BoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt16BoolOp{}

func (c *castInt16BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16DecimalOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt16DecimalOp{}

func (c *castInt16DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt16Float64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt16Float64Op{}

func (c *castInt16Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32Int16Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt32Int16Op{}

func (c *castInt32Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							r = int16(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							r = int16(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						r = int16(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						r = int16(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32Int32Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt32Int32Op{}

func (c *castInt32Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32
							r = v
							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int32
						r = v
						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int32
						r = v
						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32Int64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt32Int64Op{}

func (c *castInt32Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							r = int64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						r = int64(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32BoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt32BoolOp{}

func (c *castInt32BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32DecimalOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt32DecimalOp{}

func (c *castInt32DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt32Float64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt32Float64Op{}

func (c *castInt32Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64Int16Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt64Int16Op{}

func (c *castInt64Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							r = int16(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							r = int16(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						r = int16(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						r = int16(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64Int32Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt64Int32Op{}

func (c *castInt64Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							r = int32(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							r = int32(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						r = int32(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						r = int32(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64Int64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt64Int64Op{}

func (c *castInt64Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64
							r = v
							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int64
						r = v
						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int64
						r = v
						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64BoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt64BoolOp{}

func (c *castInt64BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64DecimalOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt64DecimalOp{}

func (c *castInt64DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						outputCol[i].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt64Float64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castInt64Float64Op{}

func (c *castInt64Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64

							r = float64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r float64

						r = float64(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Float64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castFloat64Float64Op{}

func (c *castFloat64Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Float64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64
							r = v
							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r float64
							r = v
							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r float64
						r = v
						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r float64
						r = v
						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64BoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castFloat64BoolOp{}

func (c *castFloat64BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r bool

							r = v != 0

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r bool

						r = v != 0

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64DecimalOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castFloat64DecimalOp{}

func (c *castFloat64DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Decimal()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							{
								var tmpDec apd.Decimal
								_, tmpErr := tmpDec.SetFloat64(float64(v))
								if tmpErr != nil {
									colexecerror.ExpectedError(tmpErr)
								}
								r = tmpDec
							}

							outputCol[i].Set(&r)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r apd.Decimal

							{
								var tmpDec apd.Decimal
								_, tmpErr := tmpDec.SetFloat64(float64(v))
								if tmpErr != nil {
									colexecerror.ExpectedError(tmpErr)
								}
								r = tmpDec
							}

							outputCol[i].Set(&r)
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						{
							var tmpDec apd.Decimal
							_, tmpErr := tmpDec.SetFloat64(float64(v))
							if tmpErr != nil {
								colexecerror.ExpectedError(tmpErr)
							}
							r = tmpDec
						}

						outputCol[i].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r apd.Decimal

						{
							var tmpDec apd.Decimal
							_, tmpErr := tmpDec.SetFloat64(float64(v))
							if tmpErr != nil {
								colexecerror.ExpectedError(tmpErr)
							}
							r = tmpDec
						}

						outputCol[i].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Int16Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castFloat64Int16Op{}

func (c *castFloat64Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int16()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int16(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int16

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int16(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Int32Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castFloat64Int32Op{}

func (c *castFloat64Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int32()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int32(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int32

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int32(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Int64Op struct {
	castOpBase
}

var _ colexecbase.Operator = &castFloat64Int64Op{}

func (c *castFloat64Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int64()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int64(v)

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i) //gcassert:inline
							var r int64

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
								colexecerror.ExpectedError(tree.ErrIntOutOfRange)
							}
							r = int64(v)

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol[0:n]
					_ = inputCol.Get(n - 1)  //gcassert:inline
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i) //gcassert:inline
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}

type castDatumBoolOp struct {
	castOpBase
}

var _ colexecbase.Operator = &castDatumBoolOp{}

func (c *castDatumBoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	if outputVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		outputVec.Nulls().UnsetNulls()
	}
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Datum()
			outputCol := outputVec.Bool()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls := outputVec.Nulls()
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i)
							var r bool

							{
								_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
								if err != nil {
									colexecerror.ExpectedError(err)
								}
								r = _castedDatum == tree.DBoolTrue
							}

							outputCol[i] = r
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol.Slice(0, n)
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						if inputNulls.NullAt(i) {
							outputNulls.SetNull(i)
						} else {
							v := inputCol.Get(i)
							var r bool

							{
								_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
								if err != nil {
									colexecerror.ExpectedError(err)
								}
								r = _castedDatum == tree.DBoolTrue
							}

							outputCol[i] = r
						}
					}
				}
			} else {
				if sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := inputCol.Get(i)
						var r bool

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum == tree.DBoolTrue
						}

						outputCol[i] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					inputCol = inputCol.Slice(0, n)
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1) //gcassert:inline
					for i := 0; i < n; i++ {
						v := inputCol.Get(i)
						var r bool

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum == tree.DBoolTrue
						}

						outputCol[i] = r
					}
				}
			}
		},
	)
	return batch
}
